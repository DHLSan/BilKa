// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XLOAD_BIGENDIAN_H
#define XLOAD_BIGENDIAN_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xload_bigendian_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Bus_a_BaseAddress;
} XLoad_bigendian_Config;
#endif

typedef struct {
    u32 Bus_a_BaseAddress;
    u32 IsReady;
} XLoad_bigendian;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XLoad_bigendian_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XLoad_bigendian_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XLoad_bigendian_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XLoad_bigendian_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XLoad_bigendian_Initialize(XLoad_bigendian *InstancePtr, u16 DeviceId);
XLoad_bigendian_Config* XLoad_bigendian_LookupConfig(u16 DeviceId);
int XLoad_bigendian_CfgInitialize(XLoad_bigendian *InstancePtr, XLoad_bigendian_Config *ConfigPtr);
#else
int XLoad_bigendian_Initialize(XLoad_bigendian *InstancePtr, const char* InstanceName);
int XLoad_bigendian_Release(XLoad_bigendian *InstancePtr);
#endif

void XLoad_bigendian_Start(XLoad_bigendian *InstancePtr);
u32 XLoad_bigendian_IsDone(XLoad_bigendian *InstancePtr);
u32 XLoad_bigendian_IsIdle(XLoad_bigendian *InstancePtr);
u32 XLoad_bigendian_IsReady(XLoad_bigendian *InstancePtr);
void XLoad_bigendian_EnableAutoRestart(XLoad_bigendian *InstancePtr);
void XLoad_bigendian_DisableAutoRestart(XLoad_bigendian *InstancePtr);

void XLoad_bigendian_Set_x(XLoad_bigendian *InstancePtr, u32 Data);
u32 XLoad_bigendian_Get_x(XLoad_bigendian *InstancePtr);
void XLoad_bigendian_Set_y(XLoad_bigendian *InstancePtr, u32 Data);
u32 XLoad_bigendian_Get_y(XLoad_bigendian *InstancePtr);

void XLoad_bigendian_InterruptGlobalEnable(XLoad_bigendian *InstancePtr);
void XLoad_bigendian_InterruptGlobalDisable(XLoad_bigendian *InstancePtr);
void XLoad_bigendian_InterruptEnable(XLoad_bigendian *InstancePtr, u32 Mask);
void XLoad_bigendian_InterruptDisable(XLoad_bigendian *InstancePtr, u32 Mask);
void XLoad_bigendian_InterruptClear(XLoad_bigendian *InstancePtr, u32 Mask);
u32 XLoad_bigendian_InterruptGetEnabled(XLoad_bigendian *InstancePtr);
u32 XLoad_bigendian_InterruptGetStatus(XLoad_bigendian *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
